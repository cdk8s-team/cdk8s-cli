// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`crds.dev import github:crossplane/crossplane@0.14.0 emit module per API group 1`] = `
Object {
  "author": Object {
    "name": "generated@generated.com",
    "roles": Array [
      "author",
    ],
  },
  "dependencies": "__omitted__",
  "dependencyClosure": Object {
    "cdk8s": Object {
      "targets": Object {
        "dotnet": Object {
          "namespace": "Org.Cdk8s",
          "packageId": "Org.Cdk8s",
        },
        "go": Object {
          "moduleName": "github.com/cdk8s-team/cdk8s-core-go",
        },
        "java": Object {
          "maven": Object {
            "artifactId": "cdk8s",
            "groupId": "org.cdk8s",
          },
          "package": "org.cdk8s",
        },
        "js": Object {
          "npm": "cdk8s",
        },
        "python": Object {
          "distName": "cdk8s",
          "module": "cdk8s",
        },
      },
    },
    "constructs": Object {
      "targets": Object {
        "dotnet": Object {
          "namespace": "Constructs",
          "packageId": "Constructs",
        },
        "go": Object {
          "moduleName": "github.com/aws/constructs-go",
        },
        "java": Object {
          "maven": Object {
            "artifactId": "constructs",
            "groupId": "software.constructs",
          },
          "package": "software.constructs",
        },
        "js": Object {
          "npm": "constructs",
        },
        "python": Object {
          "distName": "constructs",
          "module": "constructs",
        },
      },
    },
  },
  "description": "metapkgcrossplaneio",
  "fingerprint": "<fingerprint>",
  "homepage": "http://generated",
  "jsiiVersion": "__omitted__",
  "license": "UNLICENSED",
  "metadata": Object {
    "jsii": Object {
      "pacmak": Object {
        "hasDefaultInterfaces": true,
      },
    },
  },
  "name": "metapkgcrossplaneio",
  "repository": Object {
    "type": "git",
    "url": "http://generated",
  },
  "schema": "jsii/0.10.0",
  "targets": Object {
    "js": Object {
      "npm": "metapkgcrossplaneio",
    },
  },
  "types": Object {
    "metapkgcrossplaneio.ConfigurationV1Alpha1": Object {
      "assembly": "metapkgcrossplaneio",
      "base": "cdk8s.ApiObject",
      "docs": Object {
        "custom": Object {
          "schema": "ConfigurationV1Alpha1",
        },
        "summary": "A Configuration is the description of a Crossplane Configuration package.",
      },
      "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1",
      "initializer": Object {
        "docs": Object {
          "summary": "Defines a \\"ConfigurationV1Alpha1\\" API object.",
        },
        "locationInModule": Object {
          "filename": "meta.pkg.crossplane.io.ts",
          "line": 40,
        },
        "parameters": Array [
          Object {
            "docs": Object {
              "summary": "the scope in which to define this object.",
            },
            "name": "scope",
            "type": Object {
              "fqn": "constructs.Construct",
            },
          },
          Object {
            "docs": Object {
              "summary": "a scope-local name for the object.",
            },
            "name": "id",
            "type": Object {
              "primitive": "string",
            },
          },
          Object {
            "docs": Object {
              "summary": "initialization props.",
            },
            "name": "props",
            "type": Object {
              "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1Props",
            },
          },
        ],
      },
      "kind": "class",
      "locationInModule": Object {
        "filename": "meta.pkg.crossplane.io.ts",
        "line": 11,
      },
      "methods": Array [
        Object {
          "docs": Object {
            "remarks": "This can be used to inline resource manifests inside other objects (e.g. as templates).",
            "summary": "Renders a Kubernetes manifest for \\"ConfigurationV1Alpha1\\".",
          },
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 27,
          },
          "name": "manifest",
          "parameters": Array [
            Object {
              "docs": Object {
                "summary": "initialization props.",
              },
              "name": "props",
              "type": Object {
                "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1Props",
              },
            },
          ],
          "returns": Object {
            "type": Object {
              "primitive": "any",
            },
          },
          "static": true,
        },
        Object {
          "docs": Object {
            "summary": "Renders the object to Kubernetes JSON.",
          },
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 50,
          },
          "name": "toJson",
          "overrides": "cdk8s.ApiObject",
          "returns": Object {
            "type": Object {
              "primitive": "any",
            },
          },
        },
      ],
      "name": "ConfigurationV1Alpha1",
      "properties": Array [
        Object {
          "const": true,
          "docs": Object {
            "summary": "Returns the apiVersion and kind for \\"ConfigurationV1Alpha1\\".",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 15,
          },
          "name": "GVK",
          "static": true,
          "type": Object {
            "fqn": "cdk8s.GroupVersionKind",
          },
        },
      ],
      "symbolId": "meta.pkg.crossplane.io:ConfigurationV1Alpha1",
    },
    "metapkgcrossplaneio.ConfigurationV1Alpha1Props": Object {
      "assembly": "metapkgcrossplaneio",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "ConfigurationV1Alpha1",
        },
        "summary": "A Configuration is the description of a Crossplane Configuration package.",
      },
      "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1Props",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "meta.pkg.crossplane.io.ts",
        "line": 65,
      },
      "name": "ConfigurationV1Alpha1Props",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1#spec",
            },
            "summary": "ConfigurationSpec specifies the configuration of a Configuration.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 76,
          },
          "name": "spec",
          "type": Object {
            "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1Spec",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1#metadata",
            },
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 69,
          },
          "name": "metadata",
          "optional": true,
          "type": Object {
            "fqn": "cdk8s.ApiObjectMetadata",
          },
        },
      ],
      "symbolId": "meta.pkg.crossplane.io:ConfigurationV1Alpha1Props",
    },
    "metapkgcrossplaneio.ConfigurationV1Alpha1Spec": Object {
      "assembly": "metapkgcrossplaneio",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "ConfigurationV1Alpha1Spec",
        },
        "summary": "ConfigurationSpec specifies the configuration of a Configuration.",
      },
      "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1Spec",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "meta.pkg.crossplane.io.ts",
        "line": 100,
      },
      "name": "ConfigurationV1Alpha1Spec",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1Spec#crossplane",
            },
            "summary": "Semantic version constraints of Crossplane that package is compatible with.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 106,
          },
          "name": "crossplane",
          "optional": true,
          "type": Object {
            "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1SpecCrossplane",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1Spec#dependsOn",
            },
            "summary": "Dependencies on other packages.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 113,
          },
          "name": "dependsOn",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1SpecDependsOn",
              },
              "kind": "array",
            },
          },
        },
      ],
      "symbolId": "meta.pkg.crossplane.io:ConfigurationV1Alpha1Spec",
    },
    "metapkgcrossplaneio.ConfigurationV1Alpha1SpecCrossplane": Object {
      "assembly": "metapkgcrossplaneio",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "ConfigurationV1Alpha1SpecCrossplane",
        },
        "summary": "Semantic version constraints of Crossplane that package is compatible with.",
      },
      "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1SpecCrossplane",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "meta.pkg.crossplane.io.ts",
        "line": 137,
      },
      "name": "ConfigurationV1Alpha1SpecCrossplane",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1SpecCrossplane#version",
            },
            "summary": "Semantic version constraints of Crossplane that package is compatible with.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 143,
          },
          "name": "version",
          "type": Object {
            "primitive": "string",
          },
        },
      ],
      "symbolId": "meta.pkg.crossplane.io:ConfigurationV1Alpha1SpecCrossplane",
    },
    "metapkgcrossplaneio.ConfigurationV1Alpha1SpecDependsOn": Object {
      "assembly": "metapkgcrossplaneio",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "ConfigurationV1Alpha1SpecDependsOn",
        },
        "remarks": "One of Provider or Configuration may be supplied.",
        "summary": "Dependency is a dependency on another package.",
      },
      "fqn": "metapkgcrossplaneio.ConfigurationV1Alpha1SpecDependsOn",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "meta.pkg.crossplane.io.ts",
        "line": 166,
      },
      "name": "ConfigurationV1Alpha1SpecDependsOn",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1SpecDependsOn#version",
            },
            "summary": "Version is the semantic version constraints of the dependency image.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 186,
          },
          "name": "version",
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1SpecDependsOn#configuration",
            },
            "summary": "Configuration is the name of a Configuration package image.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 172,
          },
          "name": "configuration",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "ConfigurationV1Alpha1SpecDependsOn#provider",
            },
            "summary": "Provider is the name of a Provider package image.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "meta.pkg.crossplane.io.ts",
            "line": 179,
          },
          "name": "provider",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
      ],
      "symbolId": "meta.pkg.crossplane.io:ConfigurationV1Alpha1SpecDependsOn",
    },
  },
  "version": "0.0.0",
}
`;

exports[`crds.dev import github:crossplane/crossplane@0.14.0 emit module per API group 2`] = `
Object {
  "apiextensions.crossplane.io.ts": "// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
 *
 * @schema CompositeResourceDefinitionV1Alpha1
 */
export class CompositeResourceDefinitionV1Alpha1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for \\"CompositeResourceDefinitionV1Alpha1\\"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apiextensions.crossplane.io/v1alpha1',
    kind: 'CompositeResourceDefinition',
  }

  /**
   * Renders a Kubernetes manifest for \\"CompositeResourceDefinitionV1Alpha1\\".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CompositeResourceDefinitionV1Alpha1Props = {}): any {
    return {
      ...CompositeResourceDefinitionV1Alpha1.GVK,
      ...toJson_CompositeResourceDefinitionV1Alpha1Props(props),
    };
  }

  /**
   * Defines a \\"CompositeResourceDefinitionV1Alpha1\\" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CompositeResourceDefinitionV1Alpha1Props = {}) {
    super(scope, id, {
      ...CompositeResourceDefinitionV1Alpha1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CompositeResourceDefinitionV1Alpha1.GVK,
      ...toJson_CompositeResourceDefinitionV1Alpha1Props(resolved),
    };
  }
}

/**
 * An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
 *
 * @schema CompositeResourceDefinitionV1Alpha1
 */
export interface CompositeResourceDefinitionV1Alpha1Props {
  /**
   * @schema CompositeResourceDefinitionV1Alpha1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CompositeResourceDefinitionSpec specifies the desired state of the definition.
   *
   * @schema CompositeResourceDefinitionV1Alpha1#spec
   */
  readonly spec?: CompositeResourceDefinitionV1Alpha1Spec;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1Props(obj: CompositeResourceDefinitionV1Alpha1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CompositeResourceDefinitionV1Alpha1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeResourceDefinitionSpec specifies the desired state of the definition.
 *
 * @schema CompositeResourceDefinitionV1Alpha1Spec
 */
export interface CompositeResourceDefinitionV1Alpha1Spec {
  /**
   * ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#claimNames
   */
  readonly claimNames?: CompositeResourceDefinitionV1Alpha1SpecClaimNames;

  /**
   * ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#connectionSecretKeys
   */
  readonly connectionSecretKeys?: string[];

  /**
   * DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#defaultCompositionRef
   */
  readonly defaultCompositionRef?: CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef;

  /**
   * EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#enforcedCompositionRef
   */
  readonly enforcedCompositionRef?: CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef;

  /**
   * Group specifies the API group of the defined composite resource. Composite resources are served under \`/apis/<group>/...\`. Must match the name of the XRD (in the form \`<names.plural>.<group>\`).
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#group
   */
  readonly group: string;

  /**
   * Names specifies the resource and kind names of the defined composite resource.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#names
   */
  readonly names: CompositeResourceDefinitionV1Alpha1SpecNames;

  /**
   * Versions is the list of all API versions of the defined composite resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \\"kube-like\\", it will sort above non \\"kube-like\\" version strings, which are ordered lexicographically. \\"Kube-like\\" versions start with a \\"v\\", then are followed by a number (the major version), then optionally the string \\"alpha\\" or \\"beta\\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. Note that all versions must have identical schemas; Crossplane does not currently support conversion between different version schemas.
   *
   * @schema CompositeResourceDefinitionV1Alpha1Spec#versions
   */
  readonly versions: CompositeResourceDefinitionV1Alpha1SpecVersions[];

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1Spec(obj: CompositeResourceDefinitionV1Alpha1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claimNames': toJson_CompositeResourceDefinitionV1Alpha1SpecClaimNames(obj.claimNames),
    'connectionSecretKeys': obj.connectionSecretKeys?.map(y => y),
    'defaultCompositionRef': toJson_CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef(obj.defaultCompositionRef),
    'enforcedCompositionRef': toJson_CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef(obj.enforcedCompositionRef),
    'group': obj.group,
    'names': toJson_CompositeResourceDefinitionV1Alpha1SpecNames(obj.names),
    'versions': obj.versions?.map(y => toJson_CompositeResourceDefinitionV1Alpha1SpecVersions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames
 */
export interface CompositeResourceDefinitionV1Alpha1SpecClaimNames {
  /**
   * categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like \`kubectl get all\`.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#categories
   */
  readonly categories?: string[];

  /**
   * kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the \`kind\` attribute in API calls.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#kind
   */
  readonly kind: string;

  /**
   * listKind is the serialized kind of the list for this resource. Defaults to \\"\`kind\`List\\".
   *
   * @default kind\`List\\".
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#listKind
   */
  readonly listKind?: string;

  /**
   * plural is the plural name of the resource to serve. The custom resources are served under \`/apis/<group>/<version>/.../<plural>\`. Must match the name of the CustomResourceDefinition (in the form \`<names.plural>.<group>\`). Must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#plural
   */
  readonly plural: string;

  /**
   * shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like \`kubectl get <shortname>\`. It must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#shortNames
   */
  readonly shortNames?: string[];

  /**
   * singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased \`kind\`.
   *
   * @default lowercased \`kind\`.
   * @schema CompositeResourceDefinitionV1Alpha1SpecClaimNames#singular
   */
  readonly singular?: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecClaimNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecClaimNames(obj: CompositeResourceDefinitionV1Alpha1SpecClaimNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'categories': obj.categories?.map(y => y),
    'kind': obj.kind,
    'listKind': obj.listKind,
    'plural': obj.plural,
    'shortNames': obj.shortNames?.map(y => y),
    'singular': obj.singular,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef
 */
export interface CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef {
  /**
   * Name of the referenced object.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef(obj: CompositeResourceDefinitionV1Alpha1SpecDefaultCompositionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef
 */
export interface CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef {
  /**
   * Name of the referenced object.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef(obj: CompositeResourceDefinitionV1Alpha1SpecEnforcedCompositionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Names specifies the resource and kind names of the defined composite resource.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecNames
 */
export interface CompositeResourceDefinitionV1Alpha1SpecNames {
  /**
   * categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like \`kubectl get all\`.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#categories
   */
  readonly categories?: string[];

  /**
   * kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the \`kind\` attribute in API calls.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#kind
   */
  readonly kind: string;

  /**
   * listKind is the serialized kind of the list for this resource. Defaults to \\"\`kind\`List\\".
   *
   * @default kind\`List\\".
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#listKind
   */
  readonly listKind?: string;

  /**
   * plural is the plural name of the resource to serve. The custom resources are served under \`/apis/<group>/<version>/.../<plural>\`. Must match the name of the CustomResourceDefinition (in the form \`<names.plural>.<group>\`). Must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#plural
   */
  readonly plural: string;

  /**
   * shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like \`kubectl get <shortname>\`. It must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#shortNames
   */
  readonly shortNames?: string[];

  /**
   * singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased \`kind\`.
   *
   * @default lowercased \`kind\`.
   * @schema CompositeResourceDefinitionV1Alpha1SpecNames#singular
   */
  readonly singular?: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecNames(obj: CompositeResourceDefinitionV1Alpha1SpecNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'categories': obj.categories?.map(y => y),
    'kind': obj.kind,
    'listKind': obj.listKind,
    'plural': obj.plural,
    'shortNames': obj.shortNames?.map(y => y),
    'singular': obj.singular,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeResourceDefinitionVersion describes a version of an XR.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecVersions
 */
export interface CompositeResourceDefinitionV1Alpha1SpecVersions {
  /**
   * AdditionalPrinterColumns specifies additional columns returned in Table output. If no columns are specified, a single column displaying the age of the custom resource is used. See the following link for details: https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersions#additionalPrinterColumns
   */
  readonly additionalPrinterColumns?: CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns[];

  /**
   * Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are served under this version at \`/apis/<group>/<version>/...\` if \`served\` is true.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersions#name
   */
  readonly name: string;

  /**
   * Referenceable specifies that this version may be referenced by a Composition in order to configure which resources an XR may be composed of. Exactly one version must be marked as referenceable; all Compositions must target only the referenceable version. The referenceable version must be served.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersions#referenceable
   */
  readonly referenceable: boolean;

  /**
   * Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersions#schema
   */
  readonly schema?: CompositeResourceDefinitionV1Alpha1SpecVersionsSchema;

  /**
   * Served specifies that this version should be served via REST APIs.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersions#served
   */
  readonly served: boolean;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecVersions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecVersions(obj: CompositeResourceDefinitionV1Alpha1SpecVersions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalPrinterColumns': obj.additionalPrinterColumns?.map(y => toJson_CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns(y)),
    'name': obj.name,
    'referenceable': obj.referenceable,
    'schema': toJson_CompositeResourceDefinitionV1Alpha1SpecVersionsSchema(obj.schema),
    'served': obj.served,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CustomResourceColumnDefinition specifies a column for server side printing.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns
 */
export interface CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns {
  /**
   * description is a human readable description of this column.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#description
   */
  readonly description?: string;

  /**
   * format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#format
   */
  readonly format?: string;

  /**
   * jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#jsonPath
   */
  readonly jsonPath: string;

  /**
   * name is a human readable name for the column.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#name
   */
  readonly name: string;

  /**
   * priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#priority
   */
  readonly priority?: number;

  /**
   * type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns(obj: CompositeResourceDefinitionV1Alpha1SpecVersionsAdditionalPrinterColumns | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'format': obj.format,
    'jsonPath': obj.jsonPath,
    'name': obj.name,
    'priority': obj.priority,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
 *
 * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsSchema
 */
export interface CompositeResourceDefinitionV1Alpha1SpecVersionsSchema {
  /**
   * OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
   *
   * @schema CompositeResourceDefinitionV1Alpha1SpecVersionsSchema#openAPIV3Schema
   */
  readonly openApiv3Schema?: any;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Alpha1SpecVersionsSchema' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Alpha1SpecVersionsSchema(obj: CompositeResourceDefinitionV1Alpha1SpecVersionsSchema | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'openAPIV3Schema': obj.openApiv3Schema,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
 *
 * @schema CompositeResourceDefinitionV1Beta1
 */
export class CompositeResourceDefinitionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for \\"CompositeResourceDefinitionV1Beta1\\"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apiextensions.crossplane.io/v1beta1',
    kind: 'CompositeResourceDefinition',
  }

  /**
   * Renders a Kubernetes manifest for \\"CompositeResourceDefinitionV1Beta1\\".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CompositeResourceDefinitionV1Beta1Props = {}): any {
    return {
      ...CompositeResourceDefinitionV1Beta1.GVK,
      ...toJson_CompositeResourceDefinitionV1Beta1Props(props),
    };
  }

  /**
   * Defines a \\"CompositeResourceDefinitionV1Beta1\\" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CompositeResourceDefinitionV1Beta1Props = {}) {
    super(scope, id, {
      ...CompositeResourceDefinitionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CompositeResourceDefinitionV1Beta1.GVK,
      ...toJson_CompositeResourceDefinitionV1Beta1Props(resolved),
    };
  }
}

/**
 * An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
 *
 * @schema CompositeResourceDefinitionV1Beta1
 */
export interface CompositeResourceDefinitionV1Beta1Props {
  /**
   * @schema CompositeResourceDefinitionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CompositeResourceDefinitionSpec specifies the desired state of the definition.
   *
   * @schema CompositeResourceDefinitionV1Beta1#spec
   */
  readonly spec?: CompositeResourceDefinitionV1Beta1Spec;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1Props(obj: CompositeResourceDefinitionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CompositeResourceDefinitionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeResourceDefinitionSpec specifies the desired state of the definition.
 *
 * @schema CompositeResourceDefinitionV1Beta1Spec
 */
export interface CompositeResourceDefinitionV1Beta1Spec {
  /**
   * ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#claimNames
   */
  readonly claimNames?: CompositeResourceDefinitionV1Beta1SpecClaimNames;

  /**
   * ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#connectionSecretKeys
   */
  readonly connectionSecretKeys?: string[];

  /**
   * DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#defaultCompositionRef
   */
  readonly defaultCompositionRef?: CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef;

  /**
   * EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#enforcedCompositionRef
   */
  readonly enforcedCompositionRef?: CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef;

  /**
   * Group specifies the API group of the defined composite resource. Composite resources are served under \`/apis/<group>/...\`. Must match the name of the XRD (in the form \`<names.plural>.<group>\`).
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#group
   */
  readonly group: string;

  /**
   * Names specifies the resource and kind names of the defined composite resource.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#names
   */
  readonly names: CompositeResourceDefinitionV1Beta1SpecNames;

  /**
   * Versions is the list of all API versions of the defined composite resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \\"kube-like\\", it will sort above non \\"kube-like\\" version strings, which are ordered lexicographically. \\"Kube-like\\" versions start with a \\"v\\", then are followed by a number (the major version), then optionally the string \\"alpha\\" or \\"beta\\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. Note that all versions must have identical schemas; Crossplane does not currently support conversion between different version schemas.
   *
   * @schema CompositeResourceDefinitionV1Beta1Spec#versions
   */
  readonly versions: CompositeResourceDefinitionV1Beta1SpecVersions[];

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1Spec(obj: CompositeResourceDefinitionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claimNames': toJson_CompositeResourceDefinitionV1Beta1SpecClaimNames(obj.claimNames),
    'connectionSecretKeys': obj.connectionSecretKeys?.map(y => y),
    'defaultCompositionRef': toJson_CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef(obj.defaultCompositionRef),
    'enforcedCompositionRef': toJson_CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef(obj.enforcedCompositionRef),
    'group': obj.group,
    'names': toJson_CompositeResourceDefinitionV1Beta1SpecNames(obj.names),
    'versions': obj.versions?.map(y => toJson_CompositeResourceDefinitionV1Beta1SpecVersions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames
 */
export interface CompositeResourceDefinitionV1Beta1SpecClaimNames {
  /**
   * categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like \`kubectl get all\`.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#categories
   */
  readonly categories?: string[];

  /**
   * kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the \`kind\` attribute in API calls.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#kind
   */
  readonly kind: string;

  /**
   * listKind is the serialized kind of the list for this resource. Defaults to \\"\`kind\`List\\".
   *
   * @default kind\`List\\".
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#listKind
   */
  readonly listKind?: string;

  /**
   * plural is the plural name of the resource to serve. The custom resources are served under \`/apis/<group>/<version>/.../<plural>\`. Must match the name of the CustomResourceDefinition (in the form \`<names.plural>.<group>\`). Must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#plural
   */
  readonly plural: string;

  /**
   * shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like \`kubectl get <shortname>\`. It must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#shortNames
   */
  readonly shortNames?: string[];

  /**
   * singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased \`kind\`.
   *
   * @default lowercased \`kind\`.
   * @schema CompositeResourceDefinitionV1Beta1SpecClaimNames#singular
   */
  readonly singular?: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecClaimNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecClaimNames(obj: CompositeResourceDefinitionV1Beta1SpecClaimNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'categories': obj.categories?.map(y => y),
    'kind': obj.kind,
    'listKind': obj.listKind,
    'plural': obj.plural,
    'shortNames': obj.shortNames?.map(y => y),
    'singular': obj.singular,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef
 */
export interface CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef {
  /**
   * Name of the referenced object.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef(obj: CompositeResourceDefinitionV1Beta1SpecDefaultCompositionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef
 */
export interface CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef {
  /**
   * Name of the referenced object.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef(obj: CompositeResourceDefinitionV1Beta1SpecEnforcedCompositionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Names specifies the resource and kind names of the defined composite resource.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecNames
 */
export interface CompositeResourceDefinitionV1Beta1SpecNames {
  /**
   * categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like \`kubectl get all\`.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#categories
   */
  readonly categories?: string[];

  /**
   * kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the \`kind\` attribute in API calls.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#kind
   */
  readonly kind: string;

  /**
   * listKind is the serialized kind of the list for this resource. Defaults to \\"\`kind\`List\\".
   *
   * @default kind\`List\\".
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#listKind
   */
  readonly listKind?: string;

  /**
   * plural is the plural name of the resource to serve. The custom resources are served under \`/apis/<group>/<version>/.../<plural>\`. Must match the name of the CustomResourceDefinition (in the form \`<names.plural>.<group>\`). Must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#plural
   */
  readonly plural: string;

  /**
   * shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like \`kubectl get <shortname>\`. It must be all lowercase.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#shortNames
   */
  readonly shortNames?: string[];

  /**
   * singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased \`kind\`.
   *
   * @default lowercased \`kind\`.
   * @schema CompositeResourceDefinitionV1Beta1SpecNames#singular
   */
  readonly singular?: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecNames(obj: CompositeResourceDefinitionV1Beta1SpecNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'categories': obj.categories?.map(y => y),
    'kind': obj.kind,
    'listKind': obj.listKind,
    'plural': obj.plural,
    'shortNames': obj.shortNames?.map(y => y),
    'singular': obj.singular,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeResourceDefinitionVersion describes a version of an XR.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecVersions
 */
export interface CompositeResourceDefinitionV1Beta1SpecVersions {
  /**
   * AdditionalPrinterColumns specifies additional columns returned in Table output. If no columns are specified, a single column displaying the age of the custom resource is used. See the following link for details: https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersions#additionalPrinterColumns
   */
  readonly additionalPrinterColumns?: CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns[];

  /**
   * Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are served under this version at \`/apis/<group>/<version>/...\` if \`served\` is true.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersions#name
   */
  readonly name: string;

  /**
   * Referenceable specifies that this version may be referenced by a Composition in order to configure which resources an XR may be composed of. Exactly one version must be marked as referenceable; all Compositions must target only the referenceable version. The referenceable version must be served.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersions#referenceable
   */
  readonly referenceable: boolean;

  /**
   * Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersions#schema
   */
  readonly schema?: CompositeResourceDefinitionV1Beta1SpecVersionsSchema;

  /**
   * Served specifies that this version should be served via REST APIs.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersions#served
   */
  readonly served: boolean;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecVersions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecVersions(obj: CompositeResourceDefinitionV1Beta1SpecVersions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalPrinterColumns': obj.additionalPrinterColumns?.map(y => toJson_CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns(y)),
    'name': obj.name,
    'referenceable': obj.referenceable,
    'schema': toJson_CompositeResourceDefinitionV1Beta1SpecVersionsSchema(obj.schema),
    'served': obj.served,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CustomResourceColumnDefinition specifies a column for server side printing.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns
 */
export interface CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns {
  /**
   * description is a human readable description of this column.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#description
   */
  readonly description?: string;

  /**
   * format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#format
   */
  readonly format?: string;

  /**
   * jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#jsonPath
   */
  readonly jsonPath: string;

  /**
   * name is a human readable name for the column.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#name
   */
  readonly name: string;

  /**
   * priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#priority
   */
  readonly priority?: number;

  /**
   * type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns(obj: CompositeResourceDefinitionV1Beta1SpecVersionsAdditionalPrinterColumns | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'format': obj.format,
    'jsonPath': obj.jsonPath,
    'name': obj.name,
    'priority': obj.priority,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
 *
 * @schema CompositeResourceDefinitionV1Beta1SpecVersionsSchema
 */
export interface CompositeResourceDefinitionV1Beta1SpecVersionsSchema {
  /**
   * OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
   *
   * @schema CompositeResourceDefinitionV1Beta1SpecVersionsSchema#openAPIV3Schema
   */
  readonly openApiv3Schema?: any;

}

/**
 * Converts an object of type 'CompositeResourceDefinitionV1Beta1SpecVersionsSchema' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositeResourceDefinitionV1Beta1SpecVersionsSchema(obj: CompositeResourceDefinitionV1Beta1SpecVersionsSchema | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'openAPIV3Schema': obj.openApiv3Schema,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
 *
 * @schema CompositionV1Alpha1
 */
export class CompositionV1Alpha1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for \\"CompositionV1Alpha1\\"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apiextensions.crossplane.io/v1alpha1',
    kind: 'Composition',
  }

  /**
   * Renders a Kubernetes manifest for \\"CompositionV1Alpha1\\".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CompositionV1Alpha1Props = {}): any {
    return {
      ...CompositionV1Alpha1.GVK,
      ...toJson_CompositionV1Alpha1Props(props),
    };
  }

  /**
   * Defines a \\"CompositionV1Alpha1\\" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CompositionV1Alpha1Props = {}) {
    super(scope, id, {
      ...CompositionV1Alpha1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CompositionV1Alpha1.GVK,
      ...toJson_CompositionV1Alpha1Props(resolved),
    };
  }
}

/**
 * Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
 *
 * @schema CompositionV1Alpha1
 */
export interface CompositionV1Alpha1Props {
  /**
   * @schema CompositionV1Alpha1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CompositionSpec specifies the desired state of the definition.
   *
   * @schema CompositionV1Alpha1#spec
   */
  readonly spec?: CompositionV1Alpha1Spec;

}

/**
 * Converts an object of type 'CompositionV1Alpha1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1Props(obj: CompositionV1Alpha1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CompositionV1Alpha1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositionSpec specifies the desired state of the definition.
 *
 * @schema CompositionV1Alpha1Spec
 */
export interface CompositionV1Alpha1Spec {
  /**
   * CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
   *
   * @schema CompositionV1Alpha1Spec#compositeTypeRef
   */
  readonly compositeTypeRef: CompositionV1Alpha1SpecCompositeTypeRef;

  /**
   * Resources is the list of resource templates that will be used when a composite resource referring to this composition is created.
   *
   * @schema CompositionV1Alpha1Spec#resources
   */
  readonly resources: CompositionV1Alpha1SpecResources[];

  /**
   * WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
   *
   * @schema CompositionV1Alpha1Spec#writeConnectionSecretsToNamespace
   */
  readonly writeConnectionSecretsToNamespace?: string;

}

/**
 * Converts an object of type 'CompositionV1Alpha1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1Spec(obj: CompositionV1Alpha1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'compositeTypeRef': toJson_CompositionV1Alpha1SpecCompositeTypeRef(obj.compositeTypeRef),
    'resources': obj.resources?.map(y => toJson_CompositionV1Alpha1SpecResources(y)),
    'writeConnectionSecretsToNamespace': obj.writeConnectionSecretsToNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
 *
 * @schema CompositionV1Alpha1SpecCompositeTypeRef
 */
export interface CompositionV1Alpha1SpecCompositeTypeRef {
  /**
   * APIVersion of the type.
   *
   * @schema CompositionV1Alpha1SpecCompositeTypeRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the type.
   *
   * @schema CompositionV1Alpha1SpecCompositeTypeRef#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecCompositeTypeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecCompositeTypeRef(obj: CompositionV1Alpha1SpecCompositeTypeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComposedTemplate is used to provide information about how the composed resource should be processed.
 *
 * @schema CompositionV1Alpha1SpecResources
 */
export interface CompositionV1Alpha1SpecResources {
  /**
   * Base is the target resource that the patches will be applied on.
   *
   * @schema CompositionV1Alpha1SpecResources#base
   */
  readonly base: any;

  /**
   * ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
   *
   * @schema CompositionV1Alpha1SpecResources#connectionDetails
   */
  readonly connectionDetails?: CompositionV1Alpha1SpecResourcesConnectionDetails[];

  /**
   * Patches will be applied as overlay to the base resource.
   *
   * @schema CompositionV1Alpha1SpecResources#patches
   */
  readonly patches?: CompositionV1Alpha1SpecResourcesPatches[];

  /**
   * ReadinessChecks allows users to define custom readiness checks. All checks have to return true in order for resource to be considered ready. The default readiness check is to have the \\"Ready\\" condition to be \\"True\\".
   *
   * @schema CompositionV1Alpha1SpecResources#readinessChecks
   */
  readonly readinessChecks?: CompositionV1Alpha1SpecResourcesReadinessChecks[];

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResources(obj: CompositionV1Alpha1SpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'base': obj.base,
    'connectionDetails': obj.connectionDetails?.map(y => toJson_CompositionV1Alpha1SpecResourcesConnectionDetails(y)),
    'patches': obj.patches?.map(y => toJson_CompositionV1Alpha1SpecResourcesPatches(y)),
    'readinessChecks': obj.readinessChecks?.map(y => toJson_CompositionV1Alpha1SpecResourcesReadinessChecks(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
 *
 * @schema CompositionV1Alpha1SpecResourcesConnectionDetails
 */
export interface CompositionV1Alpha1SpecResourcesConnectionDetails {
  /**
   * FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
   *
   * @schema CompositionV1Alpha1SpecResourcesConnectionDetails#fromConnectionSecretKey
   */
  readonly fromConnectionSecretKey?: string;

  /**
   * Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
   *
   * @schema CompositionV1Alpha1SpecResourcesConnectionDetails#name
   */
  readonly name?: string;

  /**
   * Value that will be propagated to the connection secret of the composition instance. Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.
   *
   * @schema CompositionV1Alpha1SpecResourcesConnectionDetails#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesConnectionDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesConnectionDetails(obj: CompositionV1Alpha1SpecResourcesConnectionDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fromConnectionSecretKey': obj.fromConnectionSecretKey,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
 *
 * @schema CompositionV1Alpha1SpecResourcesPatches
 */
export interface CompositionV1Alpha1SpecResourcesPatches {
  /**
   * FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatches#fromFieldPath
   */
  readonly fromFieldPath: string;

  /**
   * ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatches#toFieldPath
   */
  readonly toFieldPath?: string;

  /**
   * Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatches#transforms
   */
  readonly transforms?: CompositionV1Alpha1SpecResourcesPatchesTransforms[];

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesPatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesPatches(obj: CompositionV1Alpha1SpecResourcesPatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fromFieldPath': obj.fromFieldPath,
    'toFieldPath': obj.toFieldPath,
    'transforms': obj.transforms?.map(y => toJson_CompositionV1Alpha1SpecResourcesPatchesTransforms(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReadinessCheck is used to indicate how to tell whether a resource is ready for consumption
 *
 * @schema CompositionV1Alpha1SpecResourcesReadinessChecks
 */
export interface CompositionV1Alpha1SpecResourcesReadinessChecks {
  /**
   * FieldPath shows the path of the field whose value will be used.
   *
   * @schema CompositionV1Alpha1SpecResourcesReadinessChecks#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * MatchInt is the value you'd like to match if you're using \\"MatchInt\\" type.
   *
   * @schema CompositionV1Alpha1SpecResourcesReadinessChecks#matchInteger
   */
  readonly matchInteger?: number;

  /**
   * MatchString is the value you'd like to match if you're using \\"MatchString\\" type.
   *
   * @schema CompositionV1Alpha1SpecResourcesReadinessChecks#matchString
   */
  readonly matchString?: string;

  /**
   * Type indicates the type of probe you'd like to use.
   *
   * @schema CompositionV1Alpha1SpecResourcesReadinessChecks#type
   */
  readonly type: CompositionV1Alpha1SpecResourcesReadinessChecksType;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesReadinessChecks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesReadinessChecks(obj: CompositionV1Alpha1SpecResourcesReadinessChecks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'matchInteger': obj.matchInteger,
    'matchString': obj.matchString,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Transform is a unit of process whose input is transformed into an output with the supplied configuration.
 *
 * @schema CompositionV1Alpha1SpecResourcesPatchesTransforms
 */
export interface CompositionV1Alpha1SpecResourcesPatchesTransforms {
  /**
   * Map uses the input as a key in the given map and returns the value.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransforms#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Math is used to transform the input via mathematical operations such as multiplication.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransforms#math
   */
  readonly math?: CompositionV1Alpha1SpecResourcesPatchesTransformsMath;

  /**
   * String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransforms#string
   */
  readonly string?: CompositionV1Alpha1SpecResourcesPatchesTransformsString;

  /**
   * Type of the transform to be run.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransforms#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesPatchesTransforms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesPatchesTransforms(obj: CompositionV1Alpha1SpecResourcesPatchesTransforms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'math': toJson_CompositionV1Alpha1SpecResourcesPatchesTransformsMath(obj.math),
    'string': toJson_CompositionV1Alpha1SpecResourcesPatchesTransformsString(obj.string),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type indicates the type of probe you'd like to use.
 *
 * @schema CompositionV1Alpha1SpecResourcesReadinessChecksType
 */
export enum CompositionV1Alpha1SpecResourcesReadinessChecksType {
  /** MatchString */
  MATCH_STRING = \\"MatchString\\",
  /** MatchInteger */
  MATCH_INTEGER = \\"MatchInteger\\",
  /** NonEmpty */
  NON_EMPTY = \\"NonEmpty\\",
  /** None */
  NONE = \\"None\\",
}

/**
 * Math is used to transform the input via mathematical operations such as multiplication.
 *
 * @schema CompositionV1Alpha1SpecResourcesPatchesTransformsMath
 */
export interface CompositionV1Alpha1SpecResourcesPatchesTransformsMath {
  /**
   * Multiply the value.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransformsMath#multiply
   */
  readonly multiply?: number;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesPatchesTransformsMath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesPatchesTransformsMath(obj: CompositionV1Alpha1SpecResourcesPatchesTransformsMath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'multiply': obj.multiply,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
 *
 * @schema CompositionV1Alpha1SpecResourcesPatchesTransformsString
 */
export interface CompositionV1Alpha1SpecResourcesPatchesTransformsString {
  /**
   * Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
   *
   * @schema CompositionV1Alpha1SpecResourcesPatchesTransformsString#fmt
   */
  readonly fmt: string;

}

/**
 * Converts an object of type 'CompositionV1Alpha1SpecResourcesPatchesTransformsString' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Alpha1SpecResourcesPatchesTransformsString(obj: CompositionV1Alpha1SpecResourcesPatchesTransformsString | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fmt': obj.fmt,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
 *
 * @schema CompositionV1Beta1
 */
export class CompositionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for \\"CompositionV1Beta1\\"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apiextensions.crossplane.io/v1beta1',
    kind: 'Composition',
  }

  /**
   * Renders a Kubernetes manifest for \\"CompositionV1Beta1\\".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CompositionV1Beta1Props = {}): any {
    return {
      ...CompositionV1Beta1.GVK,
      ...toJson_CompositionV1Beta1Props(props),
    };
  }

  /**
   * Defines a \\"CompositionV1Beta1\\" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CompositionV1Beta1Props = {}) {
    super(scope, id, {
      ...CompositionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CompositionV1Beta1.GVK,
      ...toJson_CompositionV1Beta1Props(resolved),
    };
  }
}

/**
 * Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
 *
 * @schema CompositionV1Beta1
 */
export interface CompositionV1Beta1Props {
  /**
   * @schema CompositionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CompositionSpec specifies the desired state of the definition.
   *
   * @schema CompositionV1Beta1#spec
   */
  readonly spec?: CompositionV1Beta1Spec;

}

/**
 * Converts an object of type 'CompositionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1Props(obj: CompositionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CompositionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositionSpec specifies the desired state of the definition.
 *
 * @schema CompositionV1Beta1Spec
 */
export interface CompositionV1Beta1Spec {
  /**
   * CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
   *
   * @schema CompositionV1Beta1Spec#compositeTypeRef
   */
  readonly compositeTypeRef: CompositionV1Beta1SpecCompositeTypeRef;

  /**
   * Resources is the list of resource templates that will be used when a composite resource referring to this composition is created.
   *
   * @schema CompositionV1Beta1Spec#resources
   */
  readonly resources: CompositionV1Beta1SpecResources[];

  /**
   * WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
   *
   * @schema CompositionV1Beta1Spec#writeConnectionSecretsToNamespace
   */
  readonly writeConnectionSecretsToNamespace?: string;

}

/**
 * Converts an object of type 'CompositionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1Spec(obj: CompositionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'compositeTypeRef': toJson_CompositionV1Beta1SpecCompositeTypeRef(obj.compositeTypeRef),
    'resources': obj.resources?.map(y => toJson_CompositionV1Beta1SpecResources(y)),
    'writeConnectionSecretsToNamespace': obj.writeConnectionSecretsToNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
 *
 * @schema CompositionV1Beta1SpecCompositeTypeRef
 */
export interface CompositionV1Beta1SpecCompositeTypeRef {
  /**
   * APIVersion of the type.
   *
   * @schema CompositionV1Beta1SpecCompositeTypeRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the type.
   *
   * @schema CompositionV1Beta1SpecCompositeTypeRef#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecCompositeTypeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecCompositeTypeRef(obj: CompositionV1Beta1SpecCompositeTypeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComposedTemplate is used to provide information about how the composed resource should be processed.
 *
 * @schema CompositionV1Beta1SpecResources
 */
export interface CompositionV1Beta1SpecResources {
  /**
   * Base is the target resource that the patches will be applied on.
   *
   * @schema CompositionV1Beta1SpecResources#base
   */
  readonly base: any;

  /**
   * ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
   *
   * @schema CompositionV1Beta1SpecResources#connectionDetails
   */
  readonly connectionDetails?: CompositionV1Beta1SpecResourcesConnectionDetails[];

  /**
   * Patches will be applied as overlay to the base resource.
   *
   * @schema CompositionV1Beta1SpecResources#patches
   */
  readonly patches?: CompositionV1Beta1SpecResourcesPatches[];

  /**
   * ReadinessChecks allows users to define custom readiness checks. All checks have to return true in order for resource to be considered ready. The default readiness check is to have the \\"Ready\\" condition to be \\"True\\".
   *
   * @schema CompositionV1Beta1SpecResources#readinessChecks
   */
  readonly readinessChecks?: CompositionV1Beta1SpecResourcesReadinessChecks[];

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResources(obj: CompositionV1Beta1SpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'base': obj.base,
    'connectionDetails': obj.connectionDetails?.map(y => toJson_CompositionV1Beta1SpecResourcesConnectionDetails(y)),
    'patches': obj.patches?.map(y => toJson_CompositionV1Beta1SpecResourcesPatches(y)),
    'readinessChecks': obj.readinessChecks?.map(y => toJson_CompositionV1Beta1SpecResourcesReadinessChecks(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
 *
 * @schema CompositionV1Beta1SpecResourcesConnectionDetails
 */
export interface CompositionV1Beta1SpecResourcesConnectionDetails {
  /**
   * FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
   *
   * @schema CompositionV1Beta1SpecResourcesConnectionDetails#fromConnectionSecretKey
   */
  readonly fromConnectionSecretKey?: string;

  /**
   * Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
   *
   * @schema CompositionV1Beta1SpecResourcesConnectionDetails#name
   */
  readonly name?: string;

  /**
   * Value that will be propagated to the connection secret of the composition instance. Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.
   *
   * @schema CompositionV1Beta1SpecResourcesConnectionDetails#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesConnectionDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesConnectionDetails(obj: CompositionV1Beta1SpecResourcesConnectionDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fromConnectionSecretKey': obj.fromConnectionSecretKey,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
 *
 * @schema CompositionV1Beta1SpecResourcesPatches
 */
export interface CompositionV1Beta1SpecResourcesPatches {
  /**
   * FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
   *
   * @schema CompositionV1Beta1SpecResourcesPatches#fromFieldPath
   */
  readonly fromFieldPath: string;

  /**
   * ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
   *
   * @schema CompositionV1Beta1SpecResourcesPatches#toFieldPath
   */
  readonly toFieldPath?: string;

  /**
   * Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
   *
   * @schema CompositionV1Beta1SpecResourcesPatches#transforms
   */
  readonly transforms?: CompositionV1Beta1SpecResourcesPatchesTransforms[];

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesPatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesPatches(obj: CompositionV1Beta1SpecResourcesPatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fromFieldPath': obj.fromFieldPath,
    'toFieldPath': obj.toFieldPath,
    'transforms': obj.transforms?.map(y => toJson_CompositionV1Beta1SpecResourcesPatchesTransforms(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReadinessCheck is used to indicate how to tell whether a resource is ready for consumption
 *
 * @schema CompositionV1Beta1SpecResourcesReadinessChecks
 */
export interface CompositionV1Beta1SpecResourcesReadinessChecks {
  /**
   * FieldPath shows the path of the field whose value will be used.
   *
   * @schema CompositionV1Beta1SpecResourcesReadinessChecks#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * MatchInt is the value you'd like to match if you're using \\"MatchInt\\" type.
   *
   * @schema CompositionV1Beta1SpecResourcesReadinessChecks#matchInteger
   */
  readonly matchInteger?: number;

  /**
   * MatchString is the value you'd like to match if you're using \\"MatchString\\" type.
   *
   * @schema CompositionV1Beta1SpecResourcesReadinessChecks#matchString
   */
  readonly matchString?: string;

  /**
   * Type indicates the type of probe you'd like to use.
   *
   * @schema CompositionV1Beta1SpecResourcesReadinessChecks#type
   */
  readonly type: CompositionV1Beta1SpecResourcesReadinessChecksType;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesReadinessChecks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesReadinessChecks(obj: CompositionV1Beta1SpecResourcesReadinessChecks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'matchInteger': obj.matchInteger,
    'matchString': obj.matchString,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Transform is a unit of process whose input is transformed into an output with the supplied configuration.
 *
 * @schema CompositionV1Beta1SpecResourcesPatchesTransforms
 */
export interface CompositionV1Beta1SpecResourcesPatchesTransforms {
  /**
   * Map uses the input as a key in the given map and returns the value.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransforms#map
   */
  readonly map?: { [key: string]: string };

  /**
   * Math is used to transform the input via mathematical operations such as multiplication.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransforms#math
   */
  readonly math?: CompositionV1Beta1SpecResourcesPatchesTransformsMath;

  /**
   * String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransforms#string
   */
  readonly string?: CompositionV1Beta1SpecResourcesPatchesTransformsString;

  /**
   * Type of the transform to be run.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransforms#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesPatchesTransforms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesPatchesTransforms(obj: CompositionV1Beta1SpecResourcesPatchesTransforms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'map': ((obj.map) === undefined) ? undefined : (Object.entries(obj.map).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'math': toJson_CompositionV1Beta1SpecResourcesPatchesTransformsMath(obj.math),
    'string': toJson_CompositionV1Beta1SpecResourcesPatchesTransformsString(obj.string),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type indicates the type of probe you'd like to use.
 *
 * @schema CompositionV1Beta1SpecResourcesReadinessChecksType
 */
export enum CompositionV1Beta1SpecResourcesReadinessChecksType {
  /** MatchString */
  MATCH_STRING = \\"MatchString\\",
  /** MatchInteger */
  MATCH_INTEGER = \\"MatchInteger\\",
  /** NonEmpty */
  NON_EMPTY = \\"NonEmpty\\",
  /** None */
  NONE = \\"None\\",
}

/**
 * Math is used to transform the input via mathematical operations such as multiplication.
 *
 * @schema CompositionV1Beta1SpecResourcesPatchesTransformsMath
 */
export interface CompositionV1Beta1SpecResourcesPatchesTransformsMath {
  /**
   * Multiply the value.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransformsMath#multiply
   */
  readonly multiply?: number;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesPatchesTransformsMath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesPatchesTransformsMath(obj: CompositionV1Beta1SpecResourcesPatchesTransformsMath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'multiply': obj.multiply,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
 *
 * @schema CompositionV1Beta1SpecResourcesPatchesTransformsString
 */
export interface CompositionV1Beta1SpecResourcesPatchesTransformsString {
  /**
   * Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
   *
   * @schema CompositionV1Beta1SpecResourcesPatchesTransformsString#fmt
   */
  readonly fmt: string;

}

/**
 * Converts an object of type 'CompositionV1Beta1SpecResourcesPatchesTransformsString' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CompositionV1Beta1SpecResourcesPatchesTransformsString(obj: CompositionV1Beta1SpecResourcesPatchesTransformsString | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fmt': obj.fmt,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

",
  "meta.pkg.crossplane.io.ts": "// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema ConfigurationV1Alpha1
 */
export class ConfigurationV1Alpha1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for \\"ConfigurationV1Alpha1\\"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'meta.pkg.crossplane.io/v1alpha1',
    kind: 'Configuration',
  }

  /**
   * Renders a Kubernetes manifest for \\"ConfigurationV1Alpha1\\".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConfigurationV1Alpha1Props): any {
    return {
      ...ConfigurationV1Alpha1.GVK,
      ...toJson_ConfigurationV1Alpha1Props(props),
    };
  }

  /**
   * Defines a \\"ConfigurationV1Alpha1\\" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConfigurationV1Alpha1Props) {
    super(scope, id, {
      ...ConfigurationV1Alpha1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ConfigurationV1Alpha1.GVK,
      ...toJson_ConfigurationV1Alpha1Props(resolved),
    };
  }
}

/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema ConfigurationV1Alpha1
 */
export interface ConfigurationV1Alpha1Props {
  /**
   * @schema ConfigurationV1Alpha1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ConfigurationSpec specifies the configuration of a Configuration.
   *
   * @schema ConfigurationV1Alpha1#spec
   */
  readonly spec: ConfigurationV1Alpha1Spec;

}

/**
 * Converts an object of type 'ConfigurationV1Alpha1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Alpha1Props(obj: ConfigurationV1Alpha1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ConfigurationV1Alpha1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigurationSpec specifies the configuration of a Configuration.
 *
 * @schema ConfigurationV1Alpha1Spec
 */
export interface ConfigurationV1Alpha1Spec {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationV1Alpha1Spec#crossplane
   */
  readonly crossplane?: ConfigurationV1Alpha1SpecCrossplane;

  /**
   * Dependencies on other packages.
   *
   * @schema ConfigurationV1Alpha1Spec#dependsOn
   */
  readonly dependsOn?: ConfigurationV1Alpha1SpecDependsOn[];

}

/**
 * Converts an object of type 'ConfigurationV1Alpha1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Alpha1Spec(obj: ConfigurationV1Alpha1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'crossplane': toJson_ConfigurationV1Alpha1SpecCrossplane(obj.crossplane),
    'dependsOn': obj.dependsOn?.map(y => toJson_ConfigurationV1Alpha1SpecDependsOn(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Semantic version constraints of Crossplane that package is compatible with.
 *
 * @schema ConfigurationV1Alpha1SpecCrossplane
 */
export interface ConfigurationV1Alpha1SpecCrossplane {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationV1Alpha1SpecCrossplane#version
   */
  readonly version: string;

}

/**
 * Converts an object of type 'ConfigurationV1Alpha1SpecCrossplane' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Alpha1SpecCrossplane(obj: ConfigurationV1Alpha1SpecCrossplane | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Dependency is a dependency on another package. One of Provider or Configuration may be supplied.
 *
 * @schema ConfigurationV1Alpha1SpecDependsOn
 */
export interface ConfigurationV1Alpha1SpecDependsOn {
  /**
   * Configuration is the name of a Configuration package image.
   *
   * @schema ConfigurationV1Alpha1SpecDependsOn#configuration
   */
  readonly configuration?: string;

  /**
   * Provider is the name of a Provider package image.
   *
   * @schema ConfigurationV1Alpha1SpecDependsOn#provider
   */
  readonly provider?: string;

  /**
   * Version is the semantic version constraints of the dependency image.
   *
   * @schema ConfigurationV1Alpha1SpecDependsOn#version
   */
  readonly version: string;

}

/**
 * Converts an object of type 'ConfigurationV1Alpha1SpecDependsOn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Alpha1SpecDependsOn(obj: ConfigurationV1Alpha1SpecDependsOn | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'provider': obj.provider,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

",
}
`;
